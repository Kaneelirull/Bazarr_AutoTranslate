import requests
import time  # Required for tracking elapsed time and enforcing runtime limit
from urllib.parse import quote  # Import for URL encoding
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading


# ANSI Escape Color Codes
GREEN = "\033[92m"   # Bright Green for [INFO]
YELLOW = "\033[93m"  # Bright Yellow for [DEBUG]
RED = "\033[91m"     # Bright Red for [WARNING]
BOLD_RED = "\033[1;91m"  # Bold Bright Red for [ERROR]
RESET = "\033[0m"    # Reset to default terminal color

# Set how many translations to run in parallel
MAX_PARALLEL_TRANSLATIONS = 3

# Bazarr Configuration
BAZARR_HOSTNAME = "Localhost:1337"  # Update your hostname here
BAZARR_APIKEY = "BAZARR_APIKEY"

#API call timeout

API_TIMEOUT = 2400

# Language preferences
FIRST_LANG = "et"  # Primary target language
SECOND_LANG = "sv"  # Secondary target language (optional)

HEADERS = {"Accept": "application/json", "X-API-KEY": BAZARR_APIKEY}

# Global variable to store the start time
script_start_time = time.time()  # Record when the script starts

# Maximum allowed runtime for the script (in seconds)
MAX_RUNTIME = 3000  # 50 Mins


def get_api_url(endpoint):
    """Construct the full API URL for a given endpoint."""
    return f"http://{BAZARR_HOSTNAME}/api/{endpoint}"


def fetch_items(item_type, wanted_endpoint):
    """Fetch the list of wanted episodes or movies."""
    # Get the current thread name
    thread_name = threading.current_thread().name

    url = get_api_url(wanted_endpoint)
    print(f"{YELLOW}[DEBUG] [{thread_name}] Fetching {item_type} from URL: {url}{RESET}")

    try:
        response = requests.get(url, headers=HEADERS)
        print(f"{YELLOW}[DEBUG] [{thread_name}] Response status code: {response.status_code}{RESET}")
        if response.status_code == 200:
            items = response.json().get("data", [])
            for item in items:
                item_id = item.get(id_field, item.get("sonarrEpisodeId", item.get("radarrId", "Unknown ID")))
                print(f"{YELLOW}[DEBUG] [{thread_name}] Item fetched: {item.get('seriesTitle', item.get('title', 'Unknown'))} (ID: {item_id}){RESET}")
            print(f"{GREEN}[INFO] [{thread_name}] Fetched {len(items)} {item_type}(s).{RESET}")
            return items
        else:
            print(f"{RED}[WARNING] [{thread_name}] Failed to fetch {item_type}: {response.status_code}{RESET}")
            print(f"{YELLOW}[DEBUG] [{thread_name}] Response text: {response.text}{RESET}")
            return []
    except requests.RequestException as e:
        print(f"{BOLD_RED}[ERROR] [{thread_name}] Exception occurred while fetching {item_type}: {e}{RESET}")
        return []


def download_subtitles(item_type, item_id, params_field, language="en", series_id=None):
    """
    Download subtitles for a given item (episode or movie) in the specified language.
    Adds seriesid for episodes if required.
    """
    url = get_api_url(f"{item_type}/subtitles")
    
    # Construct the query parameters dynamically
    if item_type == "episodes" and series_id:  # Episodes require 'seriesid' and 'episodeid'
        query_params = f"seriesid={series_id}&{params_field}={item_id}&language={language}&forced=false&hi=false"
    else:  # Movies only require 'radarrid'
        query_params = f"{params_field}={item_id}&language={language}&forced=false&hi=false"
    
    constructed_url = f"{url}?{query_params}"

    print(f"{YELLOW}[DEBUG] Attempting to download {language} subtitles from URL: {constructed_url}{RESET}")
    try:
        response = requests.patch(constructed_url, headers=HEADERS)
        print(f"{YELLOW}[DEBUG] Response status code: {response.status_code}{RESET}")
        if response.status_code == 204:
            print(f"{GREEN}[INFO] Subtitles in language '{language}' successfully downloaded for {item_type} (ID: {item_id}).{RESET}")
            return True
        else:
            print(f"{RED}[WARNING] Failed to download subtitles in language '{language}'. Response Code: {response.status_code}{RESET}")
            print(f"{YELLOW}[DEBUG] Response text: {response.text}{RESET}")
            return False
    except requests.RequestException as e:
        print(f"{BOLD_RED}[ERROR] Exception occurred while trying to download subtitles in language '{language}': {e}{RESET}")
        return False


def fetch_subtitle_path(item_type, item_id, params_field, language="en"):
    """Retrieve the path of subtitles for a given item in the specified language and URL encode it."""
    # Retrieve the current thread name
    thread_name = threading.current_thread().name

    url = get_api_url(item_type)
    constructed_url = f"{url}?{params_field}%5B%5D={item_id}&language={language}"
    print(f"{YELLOW}[DEBUG] [{thread_name}] Fetching subtitle path for {item_type} (ID: {item_id}, Language: {language}) from URL: {constructed_url}{RESET}")

    try:
        response = requests.get(constructed_url, headers=HEADERS)
        print(f"{YELLOW}[DEBUG] [{thread_name}] Response status code for {item_type} (ID: {item_id}): {response.status_code}{RESET}")
        
        if response.status_code == 200:
            history = response.json()
            for item in history.get("data", []):
                if "subtitles" in item:
                    for subtitle in item["subtitles"]:
                        if subtitle.get("code2") == language:  # Look for specified language subtitles
                            raw_path = subtitle["path"]
                            encoded_path = quote(raw_path, safe="")  # URL encode the path
                            print(f"{GREEN}[INFO] [{thread_name}] Found subtitle path for {item_type} (ID: {item_id}, Language: {language}):{RESET}")
                            print(f"{GREEN}[INFO] [{thread_name}]   - Raw: {raw_path}{RESET}")
                            print(f"{GREEN}[INFO] [{thread_name}]   - Encoded: {encoded_path}{RESET}")
                            return encoded_path
        else:
            print(f"{RED}[WARNING] [{thread_name}] Failed to fetch subtitle path for {item_type} (ID: {item_id}). Response Code: {response.status_code}{RESET}")
            print(f"{YELLOW}[DEBUG] [{thread_name}] Response text: {response.text}{RESET}")
    except requests.RequestException as e:
        print(f"{BOLD_RED}[ERROR] [{thread_name}] Exception occurred while fetching subtitle path for {item_type} (ID: {item_id}): {e}{RESET}")
    
    return None


def translate_subtitle(item_type, item_id, subs_path, target_lang, params_field, series_id=None):
    """Translate subtitles to the specified target language with retry mechanism for status code 500."""
    # Retrieve the current thread name
    thread_name = threading.current_thread().name

    # Early debug message with context
    print(f"{YELLOW}[DEBUG] [{thread_name}] Translating subtitles for {item_type} (ID: {item_id}) to language: {target_lang}{RESET}")

    if not target_lang:
        print(f"{YELLOW}[DEBUG] [{thread_name}] Target language not specified. Skipping translation for {item_type} (ID: {item_id}).{RESET}")
        return False

    # Convert item_type to singular form for the API call
    singular_item_type = "movie" if item_type == "movies" else "episode" if item_type == "episodes" else item_type

    # Construct the translation URL
    url = get_api_url("subtitles")
    constructed_url = (
        f"{url}?action=translate&language={target_lang}&path={subs_path}&type={singular_item_type}&id={item_id}&forced=false&hi=false"
    )

    # Log the constructed URL and context
    print(f"{YELLOW}[DEBUG] [{thread_name}] Translation Details for {item_type} (ID: {item_id}):{RESET}")
    print(f"{YELLOW}  - Target Language: {target_lang}{RESET}")
    print(f"{YELLOW}  - Subtitle Path (Encoded): {subs_path}{RESET}")
    print(f"{YELLOW}  - Constructed URL: {constructed_url}{RESET}")

    try:
        # Start timing
        start_time = time.time()
        print(f"{YELLOW}[DEBUG] [{thread_name}] Sending PATCH request to translate subtitles for {item_type} (ID: {item_id}).{RESET}")

        # Send the API PATCH request with the global timeout variable
        response = requests.patch(constructed_url, headers=HEADERS, timeout=API_TIMEOUT)

        # End timing
        elapsed_time = time.time() - start_time
        print(f"{YELLOW}[DEBUG] [{thread_name}] PATCH response for {item_type} (ID: {item_id}) received: {response.status_code}{RESET}")
        print(f"{GREEN}[INFO] [{thread_name}] Time taken for API request: {elapsed_time:.2f} seconds for {item_type} (ID: {item_id}){RESET}")

        if response.status_code == 204:
            print(f"{GREEN}[INFO] [{thread_name}] Subtitles translated successfully to {target_lang} for {item_type} (ID: {item_id}).{RESET}")
            return True
        elif response.status_code == 500:
            print(f"{RED}[WARNING] [{thread_name}] Received status code 500 for {item_type} (ID: {item_id}). Retrying subtitle translation...{RESET}")

            # Retry mechanism for status code 500
            print(f"{YELLOW}[DEBUG] [{thread_name}] Re-downloading English subtitles to retry translation for {item_type} (ID: {item_id}).{RESET}")
            if download_subtitles(item_type, item_id, params_field, language="en", series_id=series_id):
                print(f"{GREEN}[INFO] [{thread_name}] Successfully re-downloaded English subtitles for {item_type} (ID: {item_id}).{RESET}")
                new_subs_path = fetch_subtitle_path(item_type, item_id, params_field)
                if new_subs_path:
                    retry_url = (
                        f"{url}?action=translate&language={target_lang}&path={new_subs_path}&type={singular_item_type}&id={item_id}&forced=false&hi=false"
                    )
                    print(f"{YELLOW}[DEBUG] [{thread_name}] Retrying translation using new subtitle path for {item_type} (ID: {item_id}): {retry_url}{RESET}")

                    # Retry the translation with the global timeout variable
                    retry_start_time = time.time()
                    retry_response = requests.patch(retry_url, headers=HEADERS, timeout=API_TIMEOUT)
                    retry_elapsed_time = time.time() - retry_start_time

                    print(f"{YELLOW}[DEBUG] [{thread_name}] Retry response status code for {item_type} (ID: {item_id}): {retry_response.status_code}{RESET}")
                    print(f"{GREEN}[INFO] [{thread_name}] Time taken for retry API request: {retry_elapsed_time:.2f} seconds for {item_type} (ID: {item_id}){RESET}")

                    if retry_response.status_code == 204:
                        print(f"{GREEN}[INFO] [{thread_name}] Subtitles successfully translated to {target_lang} after retry for {item_type} (ID: {item_id}).{RESET}")
                        return True
                    else:
                        print(f"{RED}[WARNING] [{thread_name}] Retry translation failed for {item_type} (ID: {item_id}). Response Code: {retry_response.status_code}{RESET}")
                        print(f"{YELLOW}[DEBUG] [{thread_name}] Retry response text: {retry_response.text}{RESET}")
                else:
                    print(f"{BOLD_RED}[ERROR] [{thread_name}] Failed to fetch new English subtitles path for retry for {item_type} (ID: {item_id}).{RESET}")
            else:
                print(f"{BOLD_RED}[ERROR] [{thread_name}] Could not re-download English subtitles for {item_type} (ID: {item_id}).{RESET}")

        # Handle other failure responses
        print(f"{RED}[WARNING] [{thread_name}] Failed to translate subtitles for {item_type} (ID: {item_id}). Response Code: {response.status_code}{RESET}")
        print(f"{YELLOW}[DEBUG] [{thread_name}] Response text: {response.text}{RESET}")
        return False
    except requests.Timeout:
        print(f"{BOLD_RED}[ERROR] [{thread_name}] Timeout occurred while translating subtitles for {item_type} (ID: {item_id}).{RESET}")
        return False
    except requests.RequestException as e:
        print(f"{BOLD_RED}[ERROR] [{thread_name}] Exception occurred while translating subtitles for {item_type} (ID: {item_id}): {e}{RESET}")
        return False


def fetch_subtitle_data(item_type, item_id, params_field):
    """Fetch available subtitles for a specific episode or movie."""
    thread_name = threading.current_thread().name
    url = get_api_url(f"{item_type}?length=-1&{params_field}%5B%5D={item_id}")
    print(f"{YELLOW}[DEBUG] [{thread_name}] Fetching subtitles from URL: {url}{RESET}")
    try:
        response = requests.get(url, headers=HEADERS)
        print(f"{YELLOW}[DEBUG] [{thread_name}] Subtitle response status code: {response.status_code}{RESET}")
        if response.status_code == 200:
            subtitle_response = response.json()
            #print(f"{YELLOW}[DEBUG] [{thread_name}] Subtitle API response: {subtitle_response}{RESET}")
            for item in subtitle_response.get("data", []):
                if "subtitles" in item:
                    return item["subtitles"]
            return []
        else:
            print(f"{RED}[WARNING] [{thread_name}] Failed to fetch subtitles: {response.status_code}{RESET}")
            return []
    except requests.RequestException as e:
        print(f"{BOLD_RED}[ERROR] [{thread_name}] Exception while fetching subtitles: {e}{RESET}")
        return []


def process_item(item, item_type, id_field, params_field):
    """Process a single item: Determine missing subtitles, download, and translate."""
    thread_name = threading.current_thread().name

    if time.time() - script_start_time > MAX_RUNTIME:
        print(f"{RED}[WARNING] [{thread_name}] Maximum runtime exceeded. Stopping further processing.{RESET}")
        return

    item_id = item[id_field]
    item_name = item.get("seriesTitle", item.get("title", "Unknown Item"))
    series_id = item.get("sonarrSeriesId") if item_type == "episodes" else None

    print(f"{GREEN}[INFO] [{thread_name}] Processing: {item_name} (ID: {item_id}){RESET}")

    missing_subtitles = item.get("missing_subtitles", [])
    missing_languages = [lang["code2"] for lang in missing_subtitles]

    # Fetch available subtitles dynamically
    subtitles_data = fetch_subtitle_data(item_type, item_id, params_field)
    available_languages = [lang.get("code2", "Unknown") for lang in subtitles_data] if isinstance(subtitles_data, list) else []

    print(f"{YELLOW}[DEBUG] [{thread_name}] Missing languages: {missing_languages}, Available languages: {available_languages}{RESET}")

    subs_path = None
    
    if "en" in missing_languages:
        if not download_subtitles(item_type, item_id, params_field, language="en", series_id=series_id) or not (subs_path := fetch_subtitle_path(item_type, item_id, params_field, language="en")):
            print(f"{RED}[WARNING] [{thread_name}] English subtitles unavailable or failed to retrieve. Trying another language.{RESET}")
            preferred_languages = [SECOND_LANG, FIRST_LANG]
            for lang in preferred_languages:
                if lang in available_languages:
                    subs_path = fetch_subtitle_path(item_type, item_id, params_field, language=lang)
                    print(f"{GREEN}[INFO] [{thread_name}] Using {lang} subtitles for translation.{RESET}")
                    
                    if "en" in missing_languages:  # Fixed indentation
                        if translate_subtitle(item_type, item_id, subs_path, "en", params_field, series_id=series_id):
                            print(f"{GREEN}[INFO] [{thread_name}] Translated {item_name} subtitles to en.{RESET}")
                            
                    break
            else:
                print(f"{RED}[WARNING] [{thread_name}] No usable subtitles found for translation. Skipping...{RESET}")
                return
    else:
        subs_path = fetch_subtitle_path(item_type, item_id, params_field)

    if not subs_path:
        print(f"{RED}[WARNING] [{thread_name}] Failed to retrieve subtitle path for {item_name}. Skipping...{RESET}")
        return
    
    if FIRST_LANG in missing_languages:
        if translate_subtitle(item_type, item_id, subs_path, FIRST_LANG, params_field, series_id=series_id):
            print(f"{GREEN}[INFO] [{thread_name}] Translated {item_name} subtitles to {FIRST_LANG}.{RESET}")

    if SECOND_LANG and SECOND_LANG in missing_languages:
        if translate_subtitle(item_type, item_id, subs_path, SECOND_LANG, params_field, series_id=series_id):
            print(f"{GREEN}[INFO] [{thread_name}] Translated {item_name} subtitles to {SECOND_LANG}.{RESET}")


def process_items(item_type, wanted_endpoint, id_field, params_field):
    """Process all wanted items of a specified type (episodes or movies) with parallel processing."""
    # Check if runtime has exceeded the allowed limit
    if time.time() - script_start_time > MAX_RUNTIME:
        print(f"{RED}[WARNING] Maximum runtime of {MAX_RUNTIME / 3600:.2f} hours exceeded. Stopping execution.{RESET}")
        return

    items = fetch_items(item_type, wanted_endpoint)
    if not items:
        print(f"{GREEN}[INFO] No {item_type} items found to process.{RESET}")
        return

    print(f"{GREEN}[INFO] Beginning parallel processing for {len(items)} {item_type}(s).{RESET}")
    
    # Use ThreadPoolExecutor for parallel processing
    with ThreadPoolExecutor(max_workers=MAX_PARALLEL_TRANSLATIONS) as executor:
        # Submit tasks to ThreadPoolExecutor
        future_to_item = {
            executor.submit(process_item, item, item_type, id_field, params_field): item for item in items
        }

        # As each task completes, log the results or handle exceptions
        for future in as_completed(future_to_item):
            # Check if runtime has exceeded the allowed limit
            if time.time() - script_start_time > MAX_RUNTIME:
                print(f"{RED}[WARNING] Maximum runtime of {MAX_RUNTIME / 3600:.2f} hours exceeded. Stopping execution.{RESET}")
                return

            item = future_to_item[future]
            item_name = item.get("seriesTitle", item.get("title", "Unknown Item"))
            item_id = item.get(id_field, "Unknown ID")  # Include `id_field` as an identifier
            try:
                # Return result of the task
                future.result()
                print(f"{GREEN}[INFO] Successfully completed processing for item: {item_name} (ID: {item_id}){RESET}")
            except Exception as e:
                print(f"{BOLD_RED}[ERROR] Failed to process item: {item_name} (ID: {item_id}). Exception: {e}{RESET}")


def translate_episode_subs():
    """Translate subtitles for all wanted episodes."""
    process_items(
        item_type="episodes",
        wanted_endpoint="episodes/wanted?start=0&length=-1",
        id_field="sonarrEpisodeId",
        params_field="episodeid",
    )


def translate_movie_subs():
    """Translate subtitles for all wanted movies."""
    process_items(
        item_type="movies",
        wanted_endpoint="movies/wanted?start=0&length=-1",
        id_field="radarrId",
        params_field="radarrid",
    )


def main():
    print(f"{GREEN}[INFO] Starting subtitle processing...{RESET}")

    # Keep track of start time
    global script_start_time
    script_start_time = time.time()

    try:
        # Translate movies
        if time.time() - script_start_time > MAX_RUNTIME:
            raise TimeoutError(f"Maximum runtime of {MAX_RUNTIME / 3600:.2f} hours exceeded.")
        translate_movie_subs()

        # Translate episodes
        if time.time() - script_start_time > MAX_RUNTIME:
            raise TimeoutError(f"Maximum runtime of {MAX_RUNTIME / 3600:.2f} hours exceeded.")
        translate_episode_subs()

        print(f"{GREEN}[INFO] Subtitle processing completed.{RESET}")
    except TimeoutError as e:
        print(f"{RED}[WARNING] {e}{RESET}")
    except Exception as e:
        print(f"{BOLD_RED}[ERROR] Unexpected error occurred: {e}{RESET}")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"[ERROR] Unexpected error: {e}")

